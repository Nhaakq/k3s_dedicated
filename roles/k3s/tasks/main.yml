#  

- name: Install packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: latest
  loop:
    - git
    - vim
    - mlocate
    - sqlite
    - bind-utils
  tags:
    - packages
  tags:
    - early
    
- name: Create group K8S
  group:
    name: "{{ kub_group }}"
    gid: "{{ kub_group_gid }}"
    state: present
  tags:
    - early

- name: Create Users Task
  user:
    name: "{{ kub_user }}"
    state: present
    shell: /bin/bash
    uid: "{{ kub_user_uid }}"
    group: "{{ kub_group }}"
  tags:
    - early

- name: Download k3s installer
  ansible.builtin.get_url:
    url: https://get.k3s.io
    dest: /tmp/install_k3s.sh
    mode: 'u+rwx'
  tags:
    - k3s
- name: exec the k3s installer
  ansible.builtin.shell: 
    cmd: "sh /tmp/install_k3s.sh >> install_k3s_{{ ansible_date_time.iso8601_basic_short }}.log"
  tags:
    - k3s

- name: Start service k3s, if not started
  ansible.builtin.service:
    name: k3s.service
    state: started
    enabled: yes
  tags:
    - k3s

- name: Insert yum repo for kube
  ansible.builtin.template:
    src: kubernetes.repo.j2
    dest: /etc/yum.repos.d/kubernetes.repo
  tags:
    - repository

- name: Get latest release kubectl bin
  ansible.builtin.shell:
    cmd: 'curl -o /root/kubectl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
  register: kubectl_file
  tags:
    - kub_conf

- name: Copy kubectl file
  ansible.builtin.copy:
    src: ~/kubectl
    dest: /usr/bin/kubectl
    mode: a+x
    owner: root
    group: root
    remote_src: yes
  tags:
    - kub_conf

- name: Create Directory for kub conf
  ansible.builtin.file:
    path: ~/.kube
    state: directory
  tags:
    - kub_conf
    - kub_file

- name: Copy k3s conf file
  ansible.builtin.shell:
    cmd: '\cp -r /etc/rancher/k3s/k3s.yaml ~/.kube/config'
  tags:
    - kub_conf
    - kub_file

- name: 'https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3'
  ansible.builtin.uri:
    url: 'https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3'
    method: GET
    dest: /tmp/get_helm.sh
    follow_redirects: safe
    mode: 700
  register: result  
  tags:
    - helm

- name: Replace helm install dir
  ansible.builtin.lineinfile:
    path: /tmp/get_helm.sh
    search_string: '${HELM_INSTALL_DIR:="/usr/local/bin"}'
    line: '${HELM_INSTALL_DIR:="/usr/bin"}'
    mode: 700
  tags:
    - helm

- name: Launch helm script
  shell:
      "./get_helm.sh"
  args:
    chdir: "/tmp" 
  tags:
    - helm

- name: install pre-requisites
  pip:
    name:
      - openshift
      - pyyaml
      - kubernetes 
  tags:
    - kub_conf

- name: Create k8s namespace
  kubernetes.core.k8s:
    name: "{{ media_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  tags:
    - kub_conf
    - namespace

- name: Create /data Directory
  ansible.builtin.file:
    path: /data
    state: directory
    recurse: true
    mode: 0750
    owner: "{{ kub_user }}"
    group: "{{ kub_group }}"
  tags:
    - kub_conf
    - pvc_creation

- name: Download cert manager conf
  ansible.builtin.get_url:
    url: https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
    dest: /tmp/cert-manager.yaml
    mode: '0440'
  tags:
    - kub_conf
    - cert_manager

- name: Install Cert Manager
  kubernetes.core.k8s:
    state: present
    src: /tmp/cert-manager.yaml
  register: install_cert_manager
  tags:
    - kub_conf
    - ssl_configuration
  tags:
    - kub_conf
    - cert_manager

- name: Wait till the certmanaget pod is running
  kubernetes.core.k8s_info:
    kind: Pod
    wait: yes
    label_selectors:
      # - app = cert-manager
      - app.kubernetes.io/name=cert-manager
    namespace: cert-manager
    wait_sleep: 10
    wait_timeout: 360
    wait_condition:
      type: ContainersReady
      status: "True"
  tags:
    - kub_conf
    - cert_manager

- name: Copy file for k3s Deployment
  ansible.builtin.template:
    src: "templates/{{ item }}"
    dest: "/tmp/{{ item | basename | regex_replace('\.j2$', '')}}"
    owner: "{{ kub_user }}"
    group: "{{ kub_group }}"
  loop:
    - pv_config.yaml.j2
    - pv_data.yaml.j2
    - pvc_config.yaml.j2
    - pvc_data.j2
    - cluster_issuer.yaml.j2
    - traefik_middlewares.yaml.j2
  tags:
    - kub_conf
    - pvc_creation

- name: Create a deployment
  kubernetes.core.k8s:
    state: present
    namespace: "{{ media_namespace }}"
    src: "/tmp/{{ item | basename | regex_replace('\.j2$', '') }}"
  loop:
    - pv_config.yaml.j2
    - pv_data.yaml.j2
    - pvc_config.yaml.j2
    - pvc_data.j2
    - cluster_issuer.yaml.j2
    - traefik_middlewares.yaml.j2
  tags:
    - kub_conf
    - pvc_creation

- name: Change Default Context
  ansible.builtin.shell:
    cmd: 'kubectl config set-context --current --namespace={{ media_namespace }}'
  tags:
    - kub_conf